"""
Key Terms
Module - A Python file containing reusable code like functions or classes

Import - Retrieves modules making their contents available in current namespace

Virtualenv - Self-contained directory housing isolated Python packages/dependencies

Activation - Configures shell to use virtualenv's dedicated Python interpreter

Pip - Python tool for installing/managing packages and dependencies
"""
# Import module 
import utils

# Access function  
print(utils.format_name("Wyclef"))

#Using built-in Python virtualenv
# Virtualenv creation
python3 -m venv env

# Activate virtualenv 
source env/bin/activate  

# Install dependency
pip install pandas  

# Deactivate when done
deactivate

"""
This is a Python script meant to be run from the terminal (or command line)

It uses the `if __name__` construct at the end of the script to hook into any function.
In this case, it connect to the main() function

This script doesn't do much, it will just report the arguments being passed into the 
script. It should serve as a foundation to create a more powerful script
"""
import sys


def main(arguments):
    print("This is the main function, and it has access to the following variables:")
    for argument in arguments:
        print(argument)


if __name__ == '__main__':
    main(sys.argv)
