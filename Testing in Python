"""
Key Terms
Testing - Validating code behavior through automated scripts to check for correctness and catch issues.

Unit Test - Testing isolated chunks of code like functions or classes.

Test Function - An isolated test wrapped in a Python function.

Test Class - A class that contains related test methods.

Assertion - Boolean checks in test code to verify values match expectations.

Fixture - Shared test data or state managed by the testing framework.

Plain Asserts - Basic assertion statements in Python used to verify values and results.

Test Classes - Classes that contain multiple related test methods and setup/teardown logic.

Parametrize - Pytest decorator to run a test multiple times with different arguments.

Setup Method - Code that runs before each test method in a Test Class.

Teardown Method - Code that runs after each test method in a Test Class.

"""
# Using assertions in a test function 
def test_capitalize():
    assert "hello".capitalize() == "Hello"

# Class with two related test methods
class TestCalculator:

    def test_add(self):
        calculator = Calculator()
        assert calculator.add(2, 2) == 4
    
    def test_multiply(self):
         calculator = Calculator()
         assert calculator.multiply(3, 5) == 15

# Test function using pytest fixture for temp data   
import pytest

@pytest.fixture
def input_value():
    return 10  

def test_stuff(input_value):
    assert input_value == 10

# Plain assert checking values  
def test_floats():
    result = 1.2 + 1.3
    assert result == 2.5
    
# Test class with setup/teardown    
class TestDivide:

    def setup(self):
        self.calculator = Calculator()

    def teardown(self):
        del self.calculator

    def test_divide_two_numbers(self):
        assert self.calculator.divide(10, 5) == 2 

# Parametrized test function 
@pytest.mark.parametrize("num", [1, 5, 10])
def test_squared(num):
    assert num * num == square(num)


# This function is here for convenience only, in a real-world scenario this function
# would be elsewhere in a package

def str_to_int(string):
    """
    Parses a string number into an integer, optionally converting to a float
    and rounding down.
    You can pass "1.1" which returns 1
    ["1"] -> raises RuntimeError
    """
    error_msg = "Unable to convert to integer: '%s'" % str(string)
    try:
        integer = float(string.replace(',', '.'))
    except AttributeError:
        # this might be a integer already, so try to use it, otherwise raise
        # the original exception
        if isinstance(string, (int, float)):
            integer = string
        else:
            raise RuntimeError(error_msg)
    except (TypeError, ValueError):
        raise RuntimeError(error_msg)

    return int(integer)


# tests floats

class TestStrToInt:

    def setup(self):
        print('\nthis is setup')

    def teardown(self):
        print('\nthis is teardown')

    def setup_class(cls):
        print('\nthis is setup class')

    def teardown_class(cls):
        print('\nthis is teardown class')

    def test_rounds_down(self):
        result = str_to_int('1.99')
        assert result == 2

    def test_round_down_lesser_half(self):
        result = str_to_int('1.2')
        assert result == 2



# This function is here for convenience only, in a real-world scenario this function
# would be elsewhere in a package

def str_to_int(string):
    """
    Parses a string number into an integer, optionally converting to a float
    and rounding down.
    You can pass "1.1" which returns 1
    ["1"] -> raises RuntimeError
    """
    error_msg = "Unable to convert to integer: '%s'" % str(string)
    try:
        integer = float(string.replace(',', '.'))
    except AttributeError:
        # this might be a integer already, so try to use it, otherwise raise
        # the original exception
        if isinstance(string, (int, float)):
            integer = string
        else:
            raise RuntimeError(error_msg)
    except (TypeError, ValueError):
        raise RuntimeError(error_msg)

    return int(integer)


# tests floats

def test_rounds_down():
    result = str_to_int('1.99')
    assert result == 1


def test_round_down_lesser_half():
    result = str_to_int('1.2')
    assert result == 1
